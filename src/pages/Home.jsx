import React from 'react';
import Categories from '../components/Categories';
import Sort, { list } from '../components/Sort';
import DressBlock from '../components/DressBlock';
import Skeleton from '../components/Skeleton';
import Pagination from '../components/Pagination/Pagination';
//–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
import qs from 'qs';
//–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
import { Link, useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import {
  selectFilter,
  setCaregoryId,
  setCurrentPage,
  setFilters,
} from '../redux/slices/filterSlice';
import { fetchDresses, selectDressData } from '../redux/slices/dressSlice';

const Home = ({ handleImageClick }) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { categoryId, currentPage, sort, searchValue } = useSelector(selectFilter);
  const { items: dresses, status } = useSelector(selectDressData);

  const onClickCategory = (categoryNumber) => {
    dispatch(setCaregoryId(categoryNumber));
  };

  const onChangePage = (number) => {
    dispatch(setCurrentPage(number));
  };

  //–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const sort = list.find((obj) => obj.sortProperty === params.sortProperty);
      dispatch(
        setFilters({
          ...params,
          sort,
        })
      );
      isSearch.current = true;
    }
  }, []);

  //–í –ê–î–†–ï–°–ù–£–Æ –°–¢–†–û–ö–£
  React.useEffect(() => {
    //–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    if (isMounted.current) {
      const string = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      });
      //–ø–µ—Ä–µ–¥–∞–µ–º –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É
      navigate(`?${string}`);
    }
    isMounted.current = true;
  }, [categoryId, sort.sortProperty, currentPage]);

  const getDresses = () => {
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';

    dispatch(fetchDresses({ sortBy, order, category, search, currentPage }));
    window.scrollTo(0, 0);
  };

  //–ü–ª–∞—Ç—å—è
  React.useEffect(() => {
    if (!isSearch.current) {
      getDresses();
    }
    isSearch.current = false;
  }, [categoryId, sort, searchValue, currentPage]);
  // const filterArr = pizzas.filter((obj) => {
  //   if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
  //     return true;
  //   } else {
  //     return false;
  //   }
  // });
  const arr = dresses.map((item) => (
    // <Link key={item.id} to={`/dress/${item.id}`}></Link>
    <DressBlock key={item.id} {...item} handleImageClick={handleImageClick} />
  ));
  const skeletons = [...new Array(4)].map((item, index) => <Skeleton key={index} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories categoryId={categoryId} onClickCategory={onClickCategory} />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–ª–∞—Ç—å—è</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞—Ç—å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : arr}</div>
      )}
      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
